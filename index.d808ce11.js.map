{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.score = 0;\n        this.status = \"idle\";\n        this.initialState = initialState;\n        this.state = this.copyState(this.initialState);\n        this.lastNewTiles = [];\n        this.lastMoves = [];\n    }\n    copyState(state) {\n        return state.map((row)=>[\n                ...row\n            ]);\n    }\n    addRandomTile() {\n        const emptyTiles = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.state[row][col] === 0) emptyTiles.push([\n                row,\n                col\n            ]);\n        }\n        if (emptyTiles.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyTiles.length);\n            const [row, col] = emptyTiles[randomIndex];\n            this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n            return {\n                row: row,\n                col: col\n            };\n        }\n        return null;\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        const moved = this.move(\"left\");\n        if (moved) {\n            const newTile = this.addRandomTile();\n            this.lastNewTiles = [\n                newTile\n            ];\n            this.checkGameState();\n        }\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        const moved = this.move(\"right\");\n        if (moved) {\n            const newTile = this.addRandomTile();\n            this.lastNewTiles = [\n                newTile\n            ];\n            this.checkGameState();\n        }\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        const moved = this.move(\"up\");\n        if (moved) {\n            const newTile = this.addRandomTile();\n            this.lastNewTiles = [\n                newTile\n            ];\n            this.checkGameState();\n        }\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        const moved = this.move(\"down\");\n        if (moved) {\n            const newTile = this.addRandomTile();\n            this.lastNewTiles = [\n                newTile\n            ];\n            this.checkGameState();\n        }\n    }\n    move(direction) {\n        const originalState = this.copyState(this.state);\n        const combineRow = (row)=>{\n            const newRow = row.filter((n)=>n !== 0);\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                newRow[i + 1] = 0;\n                this.score += newRow[i];\n            }\n            return newRow.filter((n)=>n !== 0);\n        };\n        const moveRowLeft = (row)=>{\n            const newRow = combineRow(row);\n            while(newRow.length < 4)newRow.push(0);\n            return newRow;\n        };\n        const moveRowRight = (row)=>{\n            const copyRow = [\n                ...row\n            ];\n            const newRow = combineRow(copyRow.reverse());\n            while(newRow.length < 4)newRow.push(0);\n            return newRow.reverse();\n        };\n        const moveStateLeft = (state)=>{\n            return state.map((row)=>moveRowLeft(row));\n        };\n        const moveStateRight = (state)=>{\n            return state.map((row)=>moveRowRight(row));\n        };\n        switch(direction){\n            case \"left\":\n                this.state = moveStateLeft(this.state);\n                break;\n            case \"right\":\n                this.state = moveStateRight(this.state);\n                break;\n            case \"up\":\n                this.state = this.transposeState(moveStateLeft(this.transposeState(this.state)));\n                break;\n            case \"down\":\n                this.state = this.transposeState(moveStateRight(this.transposeState(this.state)));\n                break;\n        }\n        this.lastMoves = [];\n        const prevPositions = new Map();\n        for(let r = 0; r < 4; r++){\n            for(let c = 0; c < 4; c++)if (originalState[r][c] !== 0) {\n                const key = `${originalState[r][c]}_${r}_${c}`;\n                prevPositions.set(key, {\n                    row: r,\n                    col: c\n                });\n            }\n        }\n        for(let r = 0; r < 4; r++)for(let c = 0; c < 4; c++){\n            if (this.state[r][c] !== 0) for (const [key, pos] of prevPositions.entries()){\n                const [val] = key.split(\"_\");\n                if (+val === this.state[r][c]) {\n                    this.lastMoves.push({\n                        fromRow: pos.row,\n                        fromCol: pos.col,\n                        toRow: r,\n                        toCol: c,\n                        value: this.state[r][c]\n                    });\n                    prevPositions.delete(key);\n                    break;\n                }\n            }\n        }\n        return !this.areStatesEqual(this.state, originalState);\n    }\n    checkGameState() {\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.state[row][col] === 2048) {\n                this.status = \"win\";\n                return;\n            }\n        }\n        if (this.hasEmptyCells() || this.canCombine()) return;\n        this.status = \"lose\";\n    }\n    hasEmptyCells() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.state[row][col] === 0) return true;\n        }\n        return false;\n    }\n    canCombine() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const current = this.state[row][col];\n            if (col < 3 && current === this.state[row][col + 1]) return true;\n            if (row < 3 && current === this.state[row + 1][col]) return true;\n        }\n        return false;\n    }\n    transposeState(state) {\n        const result = [];\n        for(let col = 0; col < 4; col++){\n            result[col] = [];\n            for(let row = 0; row < 4; row++)result[col].push(state[row][col]);\n        }\n        return result;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        if (this.status === \"idle\") {\n            this.status = \"playing\";\n            const t1 = this.addRandomTile();\n            const t2 = this.addRandomTile();\n            this.lastNewTiles = [\n                t1,\n                t2\n            ];\n        }\n    }\n    restart() {\n        this.state = this.copyState(this.initialState);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    areStatesEqual(state1, state2) {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (state1[row][col] !== state2[row][col]) return false;\n        }\n        return true;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$buttonStart = document.querySelector(\".button.start\");\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    const keyToDirectionMap = {\n        ArrowLeft: \"left\",\n        ArrowRight: \"right\",\n        ArrowUp: \"up\",\n        ArrowDown: \"down\"\n    };\n    const direction = keyToDirectionMap[e.key];\n    if (!direction) return;\n    const moved = $09e991522ca7e64e$var$game.move(direction);\n    if (moved) {\n        const newTile = $09e991522ca7e64e$var$game.addRandomTile();\n        $09e991522ca7e64e$var$game.lastNewTiles = [\n            newTile\n        ];\n        $09e991522ca7e64e$var$game.checkGameState();\n        $09e991522ca7e64e$var$updateView();\n    }\n});\nfunction $09e991522ca7e64e$var$updateView() {\n    let i = 0;\n    const state = $09e991522ca7e64e$var$game.getState();\n    const newTiles = $09e991522ca7e64e$var$game.lastNewTiles || [];\n    for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n        const cell = $09e991522ca7e64e$var$cells[i];\n        cell.className = \"field-cell\";\n        cell.style.transform = \"\";\n        if (state[row][col]) {\n            cell.textContent = state[row][col];\n            cell.classList.add(`field-cell--${state[row][col]}`);\n            const isNewTile = newTiles.some((t)=>t && t.row === row && t.col === col);\n            if (isNewTile) {\n                cell.classList.add(\"new-tile\");\n                // Щоб клас не залишався після анімації\n                cell.addEventListener(\"animationend\", ()=>{\n                    cell.classList.remove(\"new-tile\");\n                }, {\n                    once: true\n                });\n            }\n        } else cell.textContent = \"\";\n        i++;\n    }\n    document.querySelector(\".game-score\").textContent = $09e991522ca7e64e$var$game.getScore();\n    const statusGame = $09e991522ca7e64e$var$game.getStatus();\n    if (statusGame === \"win\") document.querySelector(\".message-win\").classList.remove(\"hidden\");\n    else if (statusGame === \"lose\") document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n}\n$09e991522ca7e64e$var$buttonStart.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$buttonStart.className === \"button restart\") $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$updateView();\n    document.querySelector(\".message-win\").classList.add(\"hidden\");\n    document.querySelector(\".message-lose\").classList.add(\"hidden\");\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n    $09e991522ca7e64e$var$buttonStart.textContent = \"Restart\";\n    $09e991522ca7e64e$var$buttonStart.className = \"button restart\";\n});\n\n\n//# sourceMappingURL=index.d808ce11.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst cells = document.querySelectorAll('.field-cell');\nconst buttonStart = document.querySelector('.button.start');\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  const keyToDirectionMap = {\n    ArrowLeft: 'left',\n    ArrowRight: 'right',\n    ArrowUp: 'up',\n    ArrowDown: 'down',\n  };\n\n  const direction = keyToDirectionMap[e.key];\n\n  if (!direction) {\n    return;\n  }\n\n  const moved = game.move(direction);\n\n  if (moved) {\n    const newTile = game.addRandomTile();\n\n    game.lastNewTiles = [newTile];\n    game.checkGameState();\n    updateView();\n  }\n});\n\nfunction updateView() {\n  let i = 0;\n  const state = game.getState();\n  const newTiles = game.lastNewTiles || [];\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      const cell = cells[i];\n\n      cell.className = 'field-cell';\n      cell.style.transform = '';\n\n      if (state[row][col]) {\n        cell.textContent = state[row][col];\n        cell.classList.add(`field-cell--${state[row][col]}`);\n\n        const isNewTile = newTiles.some(\n          (t) => t && t.row === row && t.col === col,\n        );\n\n        if (isNewTile) {\n          cell.classList.add('new-tile');\n\n          // Щоб клас не залишався після анімації\n          cell.addEventListener(\n            'animationend',\n            () => {\n              cell.classList.remove('new-tile');\n            },\n            { once: true },\n          );\n        }\n      } else {\n        cell.textContent = '';\n      }\n      i++;\n    }\n  }\n\n  document.querySelector('.game-score').textContent = game.getScore();\n\n  const statusGame = game.getStatus();\n\n  if (statusGame === 'win') {\n    document.querySelector('.message-win').classList.remove('hidden');\n  } else if (statusGame === 'lose') {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n}\n\nbuttonStart.addEventListener('click', () => {\n  if (buttonStart.className === 'button restart') {\n    game.restart();\n  }\n\n  game.start();\n  updateView();\n  document.querySelector('.message-win').classList.add('hidden');\n  document.querySelector('.message-lose').classList.add('hidden');\n  document.querySelector('.message-start').classList.add('hidden');\n  buttonStart.textContent = 'Restart';\n  buttonStart.className = 'button restart';\n});\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.score = 0;\n    this.status = 'idle';\n    this.initialState = initialState;\n    this.state = this.copyState(this.initialState);\n    this.lastNewTiles = [];\n    this.lastMoves = [];\n  }\n\n  copyState(state) {\n    return state.map((row) => [...row]);\n  }\n\n  addRandomTile() {\n    const emptyTiles = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 0) {\n          emptyTiles.push([row, col]);\n        }\n      }\n    }\n\n    if (emptyTiles.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyTiles.length);\n      const [row, col] = emptyTiles[randomIndex];\n\n      this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n\n      return {\n        row, col,\n      };\n    }\n\n    return null;\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const moved = this.move('left');\n\n    if (moved) {\n      const newTile = this.addRandomTile();\n\n      this.lastNewTiles = [newTile];\n      this.checkGameState();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const moved = this.move('right');\n\n    if (moved) {\n      const newTile = this.addRandomTile();\n\n      this.lastNewTiles = [newTile];\n      this.checkGameState();\n    }\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const moved = this.move('up');\n\n    if (moved) {\n      const newTile = this.addRandomTile();\n\n      this.lastNewTiles = [newTile];\n      this.checkGameState();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const moved = this.move('down');\n\n    if (moved) {\n      const newTile = this.addRandomTile();\n\n      this.lastNewTiles = [newTile];\n      this.checkGameState();\n    }\n  }\n\n  move(direction) {\n    const originalState = this.copyState(this.state);\n\n    const combineRow = (row) => {\n      const newRow = row.filter((n) => n !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          newRow[i + 1] = 0;\n          this.score += newRow[i];\n        }\n      }\n\n      return newRow.filter((n) => n !== 0);\n    };\n\n    const moveRowLeft = (row) => {\n      const newRow = combineRow(row);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      return newRow;\n    };\n\n    const moveRowRight = (row) => {\n      const copyRow = [...row];\n\n      const newRow = combineRow(copyRow.reverse());\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      return newRow.reverse();\n    };\n\n    const moveStateLeft = (state) => {\n      return state.map((row) => moveRowLeft(row));\n    };\n\n    const moveStateRight = (state) => {\n      return state.map((row) => moveRowRight(row));\n    };\n\n    switch (direction) {\n      case 'left':\n        this.state = moveStateLeft(this.state);\n        break;\n\n      case 'right':\n        this.state = moveStateRight(this.state);\n        break;\n\n      case 'up':\n        this.state = this.transposeState(\n          moveStateLeft(this.transposeState(this.state)),\n        );\n        break;\n\n      case 'down':\n        this.state = this.transposeState(\n          moveStateRight(this.transposeState(this.state)),\n        );\n        break;\n    }\n\n    this.lastMoves = [];\n\n    const prevPositions = new Map();\n\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (originalState[r][c] !== 0) {\n          const key = `${originalState[r][c]}_${r}_${c}`;\n\n          prevPositions.set(key, {\n            row: r, col: c,\n          });\n        }\n      }\n    }\n\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.state[r][c] !== 0) {\n          for (const [key, pos] of prevPositions.entries()) {\n            const [val] = key.split('_');\n\n            if (+val === this.state[r][c]) {\n              this.lastMoves.push({\n                fromRow: pos.row,\n                fromCol: pos.col,\n                toRow: r,\n                toCol: c,\n                value: this.state[r][c],\n              });\n              prevPositions.delete(key);\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return !this.areStatesEqual(this.state, originalState);\n  }\n\n  checkGameState() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 2048) {\n          this.status = 'win';\n\n          return;\n        }\n      }\n    }\n\n    if (this.hasEmptyCells() || this.canCombine()) {\n      return;\n    }\n\n    this.status = 'lose';\n  }\n\n  hasEmptyCells() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  canCombine() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const current = this.state[row][col];\n\n        if (col < 3 && current === this.state[row][col + 1]) {\n          return true;\n        }\n\n        if (row < 3 && current === this.state[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  transposeState(state) {\n    const result = [];\n\n    for (let col = 0; col < 4; col++) {\n      result[col] = [];\n\n      for (let row = 0; row < 4; row++) {\n        result[col].push(state[row][col]);\n      }\n    }\n\n    return result;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n\n      const t1 = this.addRandomTile();\n      const t2 = this.addRandomTile();\n\n      this.lastNewTiles = [t1, t2];\n    }\n  }\n\n  restart() {\n    this.state = this.copyState(this.initialState);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  areStatesEqual(state1, state2) {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (state1[row][col] !== state2[row][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","score","status","state","copyState","lastNewTiles","lastMoves","map","row","addRandomTile","emptyTiles","col","push","length","randomIndex","Math","floor","random","moveLeft","move","newTile","checkGameState","moveRight","moveUp","moveDown","direction","originalState","combineRow","newRow","filter","n","i","moveRowLeft","moveRowRight","copyRow","reverse","moveStateLeft","moveStateRight","transposeState","prevPositions","Map","r","c","key","set","pos","entries","val","split","fromRow","fromCol","toRow","toCol","value","delete","areStatesEqual","hasEmptyCells","canCombine","current","result","getScore","getState","getStatus","start","t1","t2","restart","state1","state2","$09e991522ca7e64e$var$cells","document","querySelectorAll","$09e991522ca7e64e$var$buttonStart","querySelector","$09e991522ca7e64e$var$updateView","newTiles","cell","className","style","transform","textContent","classList","add","some","t","addEventListener","remove","once","statusGame","e","keyToDirectionMap","ArrowLeft","ArrowRight","ArrowUp","ArrowDown"],"version":3,"file":"index.d808ce11.js.map"}